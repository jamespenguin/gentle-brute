#!/usr/bin/env ruby

require 'digest/md5'
require 'slop'
require 'gentle_brute'

require 'ap'

def pretty_time_string time
    hours = (time/3600).to_i
    minutes = (time/60 - hours * 60).to_i
    seconds = (time - (minutes * 60 + hours * 3600))
    pretty_time = "%02d:%02d:%02d" % [hours, minutes, seconds]
    return "#{time.round(8)} seconds" if pretty_time == "00:00:00"
    pretty_time
end

def crack_md5_list file_path
    if not File.exists? file_path
        puts "[!] ERROR: '#{file_path}' does not exist."
        return
    end

    hashes = File.read(file_path).split("\n")
    ap hashes

end

Slop.parse :help => true do | opts |
    opts.banner "GentleBrute [options]"

    opts.on "word-list=", "Generate a word list of valid English-like words and phrases for a given length" do | length |
        length = length.to_i
        start_time = Time.now.to_f

        puts "[+] Generating valid words with a length #{length} characters."
        words = []
        b = GentleBrute::BruteForcer.new(start_length=length)
        print "\r[+] Words generated: #{words.length}"
        while true
            phrase = b.next_valid_phrase
            break if phrase.length > length
            words << phrase
            print "\r[+] Words generated: #{words.length}"
        end
        puts ", Finished!"
        puts "-" * 60

        puts "[+] Generated #{words.length} potential passphrases"
        chars = ('a'..'z').to_a + ["'"]
        potential_combinations = chars.length ** length
        puts "[+] There are #{potential_combinations} total potential combinations for the length you provided"
        percent = 100 - ((words.length * 100)/potential_combinations)
        puts "[+] Gentle-Brute reduced the number of hashes you would need to try by #{percent}%"
        puts "-" * 50

        puts "[+] Saved generated words to the file, words-#{length}.txt"
        File.open("words-#{length}.txt", "w") { |f| f.write words.join "\n" }

        puts "[+] Total time spent: #{Time.now.to_f-start_time}"
    end

    opts.on "cross-compare-crack=", "Cross compare brute force cracking times for a given md5 hash between GentleBrute, and regular brute forcing." do | target_hash |
        start_length = 1
        puts "-" * 75
        puts "[+] Attempting to crack target hash using heuristic brute forcing."
        start_time = Time.now.to_f
        b = GentleBrute::BruteForcer.new(start_length)

        puts
        puts "  Phrase | MD5 Hash (Phrase)                | MD5 Hash (Target)"
        puts "  " + ("-" * 75)
        while true
            phrase = b.next_valid_phrase
            attempt_hash = Digest::MD5.hexdigest(phrase)
            output_phrase = phrase
            while output_phrase.length < 8
                output_phrase = " " + output_phrase
            end
            print "\r#{output_phrase} | #{attempt_hash} | #{target_hash}"
            break if attempt_hash == target_hash
        end
        time_difference = Time.now.to_f - start_time
        puts
        puts
        puts "[+] Crack Succeeded in #{pretty_time_string time_difference}"
        puts "-" * 75
        puts

        puts "-" * 75
        puts "[+] Attempting to crack target hash using standard brute forcing"
        start_time = Time.now.to_f
        odometer = GentleBrute::Odometer.new(start_length, heuristic=false)
        puts
        puts "  Phrase | MD5 Hash (Phrase)                | MD5 Hash (Target)"
        puts "  " + ("-" * 75)
        while true
            odometer.increment
            phrase = odometer.string_for_odometer
            attempt_hash = Digest::MD5.hexdigest(phrase)
            output_phrase = phrase
            while output_phrase.length < 8
                output_phrase = " " + output_phrase
            end
            print "\r#{output_phrase} | #{attempt_hash} | #{target_hash}"
            break if attempt_hash == target_hash
        end
        time_difference1 = Time.now.to_f - start_time
        puts
        puts
        puts "[+] Crack Succeeded in #{pretty_time_string time_difference1}"
        puts "-" * 75
        puts

        puts "-" * 75
        puts "[+] GentleBrute was #{pretty_time_string(time_difference1-time_difference)} faster"
        percent = 100 - ((time_difference*100)/time_difference1)
        puts "[+] That's a speed improvement of %d%% compared to standard brute forcing!" % percent
        puts "-" * 75
    end

    opts.on "validate=", "Test whether a given word or phrase is considered valid" do | word |
        cpa_threshold = 24
        word_analyzer = GentleBrute::WordAnalyzer.new cpa_threshold
        if word_analyzer.is_valid_word? word.dup
            puts "[+] \"#{word}\" is a valid English-like word or phrase."
        else
            puts "[+] \"#{word}\" is NOT a valid English-like word or phrase."
        end
    end

    opts.on "crack-md5=", "Crack a single MD5 password hash" do | target_hash |
        start_length = 1
        puts "-" * 75
        puts "[+] Attempting to crack target hash using heuristic brute forcing."
        start_time = Time.now.to_f
        b = GentleBrute::BruteForcer.new(start_length)

        puts
        puts "  Phrase | MD5 Hash (Phrase)                | MD5 Hash (Target)"
        puts "  " + ("-" * 75)
        while true
            phrase = b.next_valid_phrase
            attempt_hash = Digest::MD5.hexdigest(phrase)
            output_phrase = phrase
            while output_phrase.length < 8
                output_phrase = " " + output_phrase
            end
            print "\r#{output_phrase} | #{attempt_hash} | #{target_hash}"
            break if attempt_hash == target_hash
        end
        time_difference = Time.now.to_f - start_time
        puts
        puts
        puts "[+] Crack Succeeded in #{pretty_time_string time_difference}"
        puts "-" * 75
        puts
    end

    opts.on "crack-md5-list=", "Crack a series of MD5 password hashes in a given file." do | file_path |
        ap opts.quiet?
        crack_md5_list file_path
    end

    opts.on_empty do
      puts opts.help
    end
end